<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Matt Krol</title><link href="https://mattkrol.me/" rel="alternate"></link><link href="https://mattkrol.me/feeds/atom.xml" rel="self"></link><id>https://mattkrol.me/</id><updated>2021-01-30T00:00:00-05:00</updated><subtitle>Electrical Engineer, Bassist, Composer</subtitle><entry><title>Maximizing the Rayleigh Quotient</title><link href="https://mattkrol.me/posts/maximizing-the-rayleigh-quotient.html" rel="alternate"></link><published>2021-01-30T00:00:00-05:00</published><updated>2021-01-30T00:00:00-05:00</updated><author><name>Matt Krol</name></author><id>tag:mattkrol.me,2021-01-30:/posts/maximizing-the-rayleigh-quotient.html</id><summary type="html">&lt;p&gt;The rayleigh quotient maximization problem naturally occurs in many disciplines&amp;mdash;machine learning, statistics, quantum mechanics, and portfolio optimization just to name a few. Although the solution of this problem is widely known, many texts state the solution without offering any proof. In this post, I will present proof of the rayleigh quotient maximization problem solution that will hopefully satisfy the most inquisitive of readers!&lt;/p&gt;</summary><content type="html">&lt;p&gt;The rayleigh quotient maximization problem naturally occurs in many disciplines&amp;mdash;machine learning, statistics, quantum mechanics, and portfolio optimization just to name a few. Although the solution of this problem is widely known, many texts state the solution without offering any proof. In this post, I will present proof of the rayleigh quotient maximization problem solution that will hopefully satisfy the most inquisitive of readers!&lt;/p&gt;
&lt;p&gt;We will begin by stating the rayleigh quotient maximization problem.&lt;/p&gt;
&lt;p&gt;Let &lt;span class="math"&gt;\(A,B\in\mathbb{R}^{d\times d}\)&lt;/span&gt; be two symmetric positive semi-definite matrices and &lt;span class="math"&gt;\(x\in\mathbb{R}^{d}\)&lt;/span&gt; be a column vector. Additionally, we will require &lt;span class="math"&gt;\(B\)&lt;/span&gt; to be invertible. We will show that the rayleigh quotient problem in &lt;span class="math"&gt;\((\ref{problem-statement})\)&lt;/span&gt; is maximized whenever &lt;span class="math"&gt;\(x\)&lt;/span&gt; is collinear to the eigenvector of &lt;span class="math"&gt;\(B^{-1}A\)&lt;/span&gt; that corresponds to the largest eigenvalue.&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation}
    \label{problem-statement}
    \mathop{\arg\max}\limits_{x}\frac{x^TAx}{x^TBx}
\end{equation}&lt;/div&gt;
&lt;p&gt;Since &lt;span class="math"&gt;\(B\)&lt;/span&gt; is symmetric, we know that there exists an orthonormal matrix &lt;span class="math"&gt;\(P\in\mathbb{R}^{d\times d}\)&lt;/span&gt; and a diagonal matrix &lt;span class="math"&gt;\(D\in\mathbb{R}^{d\times d}\)&lt;/span&gt; such that &lt;span class="math"&gt;\(B=PDP^T\)&lt;/span&gt;. Furthermore, since &lt;span class="math"&gt;\(B\)&lt;/span&gt; is also invertible and positive semi-definite, we know that the diagonal entries of &lt;span class="math"&gt;\(D\)&lt;/span&gt;, i.e., the eigenvalues of &lt;span class="math"&gt;\(B\)&lt;/span&gt;, are positive and non-zero. Consequently, the matrix &lt;span class="math"&gt;\(B^{-\frac{1}{2}}\)&lt;/span&gt; exists, and we can use the invertible substitution in &lt;span class="math"&gt;\((\ref{sub})\)&lt;/span&gt; to transform our optimization problem in &lt;span class="math"&gt;\((\ref{problem-statement})\)&lt;/span&gt; to the equivalent optimization problem shown in &lt;span class="math"&gt;\((\ref{sub-problem})\)&lt;/span&gt;.&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation}
    \label{sub}
    x=B^{-\frac{1}{2}}w
\end{equation}&lt;/div&gt;
&lt;div class="math"&gt;\begin{equation}
    \label{sub-problem}
    \mathop{\arg\max}\limits_{w}\frac{w^TB^{-\frac{1}{2}}AB^{-\frac{1}{2}}w}{w^Tw}
\end{equation}&lt;/div&gt;
&lt;p&gt;Considering the fact that &lt;span class="math"&gt;\(w=\lVert w\rVert\frac{w}{\lVert w\rVert}\)&lt;/span&gt;, we notice that &lt;span class="math"&gt;\((\ref{sub-problem})\)&lt;/span&gt; is invariant to the norm of &lt;span class="math"&gt;\(w\)&lt;/span&gt;. So the optimization problem in &lt;span class="math"&gt;\((\ref{sub-sub-problem})\)&lt;/span&gt; is equivalent to the optimization problem in &lt;span class="math"&gt;\((\ref{sub-problem})\)&lt;/span&gt;. In order to see this, suppose that &lt;span class="math"&gt;\(w^*\)&lt;/span&gt; is a solution to &lt;span class="math"&gt;\((\ref{sub-sub-problem})\)&lt;/span&gt;, then any &lt;span class="math"&gt;\(cw^*\)&lt;/span&gt; with &lt;span class="math"&gt;\(c\in\mathbb{R}\)&lt;/span&gt; is a solution to &lt;span class="math"&gt;\((\ref{sub-problem})\)&lt;/span&gt;.&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation}
    \label{sub-sub-problem}
    \mathop{\arg\max}\limits_{w,\lVert w \rVert=1}\frac{w^TB^{-\frac{1}{2}}AB^{-\frac{1}{2}}w}{w^Tw}=\mathop{\arg\max}\limits_{w,\lVert w\rVert=1}w^TB^{-\frac{1}{2}}AB^{-\frac{1}{2}}w
\end{equation}&lt;/div&gt;
&lt;p&gt;Since the matrices &lt;span class="math"&gt;\(B^{-\frac{1}{2}}\)&lt;/span&gt; and &lt;span class="math"&gt;\(A\)&lt;/span&gt; are symmetric, the product &lt;span class="math"&gt;\(B^{-\frac{1}{2}}AB^{-\frac{1}{2}}\)&lt;/span&gt; is also clearly symmetric. Hence, &lt;span class="math"&gt;\(B^{-\frac{1}{2}}AB^{-\frac{1}{2}}\)&lt;/span&gt; can be orthogonally diagonalized by an orthonormal matrix &lt;span class="math"&gt;\(V\)&lt;/span&gt; and a diagonal matrix &lt;span class="math"&gt;\(\Sigma\)&lt;/span&gt; such that &lt;span class="math"&gt;\(B^{-\frac{1}{2}}AB^{-\frac{1}{2}}=V\Sigma V^T\)&lt;/span&gt;. &lt;/p&gt;
&lt;div class="math"&gt;\begin{equation}
    \mathop{\arg\max}\limits_{w,\lVert w\rVert=1}w^TB^{-\frac{1}{2}}AB^{-\frac{1}{2}}w=\mathop{\arg\max}\limits_{w,\lVert w\rVert=1}w^TV\Sigma V^Tw
\end{equation}&lt;/div&gt;
&lt;p&gt;Let &lt;span class="math"&gt;\(\lambda_i\in\mathbb{R}\)&lt;/span&gt; and &lt;span class="math"&gt;\(v_i\in\mathbb{R^{d}}\)&lt;/span&gt; with &lt;span class="math"&gt;\(i\in\{1,2,\dots,d\}\)&lt;/span&gt; be the eigenvalues and eigenvectors of &lt;span class="math"&gt;\(B^{-\frac{1}{2}}AB^{-\frac{1}{2}}\)&lt;/span&gt; respectively. We note the following about the matrices &lt;span class="math"&gt;\(\Sigma\)&lt;/span&gt; and &lt;span class="math"&gt;\(V\)&lt;/span&gt;.&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}
    V&amp;amp;=\begin{bmatrix}v_1 &amp;amp; v_2 &amp;amp; \dots &amp;amp; v_d\end{bmatrix}\\
    \Sigma&amp;amp;=\operatorname{diag}\{\lambda_1,\lambda_2,\dots,\lambda_d\}
\end{align}&lt;/div&gt;
&lt;p&gt;Now we can rewrite &lt;span class="math"&gt;\(w^TV\Sigma V^Tw\)&lt;/span&gt; as a summation and rewrite the optimization problem in &lt;span class="math"&gt;\((\ref{sub-sub-problem})\)&lt;/span&gt; as the one shown in &lt;span class="math"&gt;\((\ref{summation})\)&lt;/span&gt;.&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}
    \mathop{\arg\max}\limits_{w,\lVert w\rVert=1}w^TV\Sigma V^Tw&amp;amp;=\mathop{\arg\max}\limits_{w,\lVert w\rVert=1}\begin{bmatrix}w^Tv_1 &amp;amp; w^Tv_2 &amp;amp; \dots &amp;amp; w^Tv_d\end{bmatrix}\Sigma\begin{bmatrix}w^Tv_1\\w^Tv_2\\\vdots\\w^Tv_d\end{bmatrix}\\
    &amp;amp;=\mathop{\arg\max}\limits_{w,\lVert w\rVert=1}\sum_{i=1}^{d}\left(w^Tv_i\right)^2\lambda_i\label{summation}
\end{align}&lt;/div&gt;
&lt;p&gt;Since &lt;span class="math"&gt;\(V\)&lt;/span&gt; is orthonormal, we have &lt;span class="math"&gt;\(w^TVV^Tw=1\)&lt;/span&gt;, so the summation &lt;span class="math"&gt;\(\sum_{i=1}^{d}\left(w^Tv_i\right)^2=1\)&lt;/span&gt; for all &lt;span class="math"&gt;\(w\)&lt;/span&gt;. Additionally, since &lt;span class="math"&gt;\(A\)&lt;/span&gt; and &lt;span class="math"&gt;\(B^{-\frac{1}{2}}\)&lt;/span&gt; are symmetric and positive semi-definite, &lt;span class="math"&gt;\(B^{-\frac{1}{2}}AB^{-\frac{1}{2}}\)&lt;/span&gt; is also symmetric and positive semi-definite, but not necessarily invertible. Thus, we conclude that all &lt;span class="math"&gt;\(\lambda_i\ge 0\)&lt;/span&gt;. Now suppose that &lt;span class="math"&gt;\(\lambda^*=\lambda_n\)&lt;/span&gt; is the largest eigenvalue of &lt;span class="math"&gt;\(B^{-\frac{1}{2}}AB^{-\frac{1}{2}}\)&lt;/span&gt;. So &lt;span class="math"&gt;\((\ref{ortho})\)&lt;/span&gt; must be true.&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation}
    \label{ortho}
    \frac{\lambda_1}{\lambda_{*}}\left(w^Tv_1\right)^2+\frac{\lambda_2}{\lambda_{*}}\left(w^Tv_2\right)^2+\dots+\left(w^Tv_n\right)\leq 1
\end{equation}&lt;/div&gt;
&lt;p&gt;It follows from &lt;span class="math"&gt;\((\ref{ortho})\)&lt;/span&gt; that &lt;span class="math"&gt;\((\ref{almost-done})\)&lt;/span&gt; must also be true.
&lt;/p&gt;
&lt;div class="math"&gt;\begin{equation}
    \label{almost-done}
    \sum_{i=1}^d\left(w^Tv_i\right)^2\lambda_i\leq \lambda^*
\end{equation}&lt;/div&gt;
&lt;p&gt;Clearly, &lt;span class="math"&gt;\(\sum_{i=1}^d\left(w^Tv_i\right)^2\lambda_i=\lambda^*\)&lt;/span&gt; if and only if &lt;span class="math"&gt;\(w\)&lt;/span&gt; is collinear to the eigenvector of &lt;span class="math"&gt;\(B^{-\frac{1}{2}}AB^{-\frac{1}{2}}\)&lt;/span&gt; that corresponds to the largest eigenvalue. Hence, under these conditions, we have maximized &lt;span class="math"&gt;\((\ref{sub-problem})\)&lt;/span&gt;. Using the substitution in &lt;span class="math"&gt;\((\ref{sub})\)&lt;/span&gt;, a solution to &lt;span class="math"&gt;\((\ref{sub-problem})\)&lt;/span&gt; can be translated into a solution to &lt;span class="math"&gt;\((\ref{problem-statement})\)&lt;/span&gt;.&lt;/p&gt;
&lt;div class="math"&gt;\begin{align}
    B^{-\frac{1}{2}}AB^{-\frac{1}{2}}w&amp;amp;=\lambda w\\
    B^{-\frac{1}{2}}AB^{-\frac{1}{2}}B^{\frac{1}{2}}x&amp;amp;=\lambda B^{\frac{1}{2}}x\\
    B^{-1}Ax&amp;amp;=\lambda x\\
\end{align}&lt;/div&gt;
&lt;p&gt;Thus, &lt;span class="math"&gt;\((\ref{problem-statement})\)&lt;/span&gt; is maximized when &lt;span class="math"&gt;\(x\)&lt;/span&gt; is collinear to the eigenvector of &lt;span class="math"&gt;\(B^{-1}A\)&lt;/span&gt; that corresponds to the largest eigenvector. This completes the proof!&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Math"></category><category term="Optimization"></category><category term="Proofs"></category></entry><entry><title>Display git status information in your shell prompt!</title><link href="https://mattkrol.me/posts/display-git-status-information-in-your-shell-prompt.html" rel="alternate"></link><published>2020-08-01T00:00:00-05:00</published><updated>2020-08-01T00:00:00-05:00</updated><author><name>Matt Krol</name></author><id>tag:mattkrol.me,2020-08-01:/posts/display-git-status-information-in-your-shell-prompt.html</id><summary type="html">&lt;p&gt;I have been using &lt;code&gt;git&lt;/code&gt; frequently these days. Recently, I have been on the hunt for a script to display &lt;code&gt;git&lt;/code&gt; status information in my &lt;code&gt;bash&lt;/code&gt; prompt. This way I can easily see important &lt;code&gt;git&lt;/code&gt; repository information in my shell prompt without having to type &lt;code&gt;git status&lt;/code&gt; all of the time which would save frequent &lt;code&gt;git&lt;/code&gt; users like myself a lot of time. However, many of the existing solutions that I found were either too simplistic or complete overkill for the task at hand, so I decided to create my own.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been using &lt;code&gt;git&lt;/code&gt; frequently these days. Recently, I have been on the hunt for a script to display &lt;code&gt;git&lt;/code&gt; status information in my &lt;code&gt;bash&lt;/code&gt; prompt. This way I can easily see important &lt;code&gt;git&lt;/code&gt; repository information in my shell prompt without having to type &lt;code&gt;git status&lt;/code&gt; all of the time which would save frequent &lt;code&gt;git&lt;/code&gt; users like myself a lot of time. However, many of the existing solutions that I found were either too simplistic or complete overkill for the task at hand, so I decided to create my own.&lt;/p&gt;
&lt;p&gt;My implementation prints the name of the current &lt;code&gt;git&lt;/code&gt; branch along with some other indicators:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;'*'&lt;/code&gt; &amp;ndash; the repository is dirty&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'?'&lt;/code&gt; &amp;ndash; untracked files exist in the repository&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'='&lt;/code&gt; &amp;ndash; the local branch is in sync with the remote&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'&amp;lt;'&lt;/code&gt; &amp;ndash; the local branch is behind of the remote&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'&amp;gt;'&lt;/code&gt; &amp;ndash; the local branch is ahead of the remote&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'&amp;lt;&amp;gt;'&lt;/code&gt; &amp;ndash; the local branch has diverged from the remote&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The internals of the script take advantage of the &lt;code&gt;git porcelain&lt;/code&gt; command and some relatively simple &lt;code&gt;awk&lt;/code&gt; to parse its output. I felt that &lt;code&gt;awk&lt;/code&gt; was the right tool for the job since &lt;code&gt;awk&lt;/code&gt; made it easy to combine the &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;sed&lt;/code&gt; operations that I needed to use into one command. I also avoided the use of &lt;code&gt;bash&lt;/code&gt; specific shell scripting features in effort to keep the script POSIX compliant, so given that your system has a POSIX compliant shell and &lt;code&gt;awk&lt;/code&gt;, you should be able to use the script without any problems.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git_status&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;STATUS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git status --branch --porcelain&lt;span class="o"&gt;=&lt;/span&gt;v2 &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$STATUS&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="nv"&gt;BRANCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$STATUS&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;$2 == &amp;quot;branch.head&amp;quot; { print $3 }&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;DIRTY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$STATUS&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;$1 ~ /[^#?]+/ { print $0 }&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$DIRTY&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nv"&gt;DIRTY_IND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nv"&gt;DIRTY_IND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="nv"&gt;UNTRACKED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$STATUS&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;$1 ~ /\?+/ { print $0 }&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$UNTRACKED&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nv"&gt;UNTRACKED_IND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;?&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nv"&gt;UNTRACKED_IND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="nv"&gt;REMOTE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$STATUS&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;$2 == &amp;quot;branch.ab&amp;quot; { gsub(/[+-]/, &amp;quot;&amp;quot;); print $3,$4 }&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$REMOTE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="nv"&gt;REMOTE_IND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;;;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;0 0&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="nv"&gt;REMOTE_IND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;=&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;;;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;0 &amp;#39;&lt;/span&gt;*&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="nv"&gt;REMOTE_IND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;;;&lt;/span&gt;
        *&lt;span class="s1"&gt;&amp;#39; 0&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="nv"&gt;REMOTE_IND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;;;&lt;/span&gt;
        *&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="nv"&gt;REMOTE_IND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;;;&lt;/span&gt;
    &lt;span class="k"&gt;esac&lt;/span&gt;
    &lt;span class="nv"&gt;INDICATORS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;UNTRACKED_IND&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;DIRTY_IND&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;REMOTE_IND&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$BRANCH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$INDICATORS&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot; (&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BRANCH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INDICATORS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$BRANCH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$INDICATORS&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot; (&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BRANCH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$BRANCH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$INDICATORS&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot; (&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;INDICATORS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is a snippet of my &lt;code&gt;.bashrc&lt;/code&gt; file. I like to keep things tidy by checking to see if &lt;code&gt;git&lt;/code&gt; is installed before using the &lt;code&gt;PS1&lt;/code&gt; loaded with the &lt;code&gt;git&lt;/code&gt; status information.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;GIT_PS1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\[\033[1;32m\]\u@\h \[\033[1;33m\]\w\[\033[1;35m\]\$(git_status)\[\033[0m\]\n\$ &amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;DEFAULT_PS1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\[\033[1;32m\]\u@\h \[\033[1;33m\]\w\[\033[0m\]\n\$ &amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -x &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt; -v git&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PS1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$GIT_PS1&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PS1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$DEFAULT_PS1&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cheers! I hope you enjoy the script.&lt;/p&gt;</content><category term="Programming"></category><category term="Bash"></category><category term="Git"></category></entry></feed>